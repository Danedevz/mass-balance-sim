clear;clc

//styling
danger = [224/255,60/255,50/255]
Warning = [255/255,211/255,1/255]
success = [123/255,182/255,98/255]
standby = [-1,-1,-1]

//Callbacks
function setStatus(status,msg)
    set("status","String","Status: "+msg)
    if status == "error" then
        set("status","String","Status: ERROR - "+msg)
        set("status","BackgroundColor",danger)
    end
    if status == "running" then
        set("status","BackgroundColor",Warning)
    end
    if status == "success" then
        set("status","BackgroundColor",success)
    end
    if status == "standby" then
        set("status","BackgroundColor",standby)
    end
    
endfunction
function validation=validate(c,mw,in,out)
    validation=or([length(c)~=0,length(mw)~=0,length(in)~=0,length(out)~=0])
endfunction

function reset()
    setStatus("standby","Waiting for input")
    set("comp_input", "String", "")
    set("mw_input", "String", "")
    set("no_input", "String", "")
    set("no_output", "String", "")
endfunction

function evaluate()
    setStatus("running","Running (check console for any error if the process stuck)")
    components = get("comp_input","String")
    mw = get("mw_input","String")
    no_input = get("no_input","String")
    no_output = get("no_output","String")
    if ~validate(components,mw,no_input,no_output) then
        setStatus("error","Parameters cannot be empty")
    end
    no_input = evstr(no_input)
    no_output = evstr(no_output)
    
    for streamin=1:no_input
        data= x_mdialog("Mass Flow for input "+string(streamin)+" (kg/h)",components,string(repmat(0,size(components))))
        for compin=1:size(components)(2)
            inputs(compin,streamin)=evstr(data(compin))/evstr(mw(compin))
            inputs_kgh(compin,streamin)=evstr(data(compin))
        end
    end
    for streamout=1:no_output
        data= x_mdialog("Mass Flow for output "+string(streamout)+" (kg/h)",components,string(repmat(0,size(components))))
        for compout=1:size(components)(2)
            outputs(compout,streamout)=evstr(data(compout))/evstr(mw(compout))
            outputs_kgh(compout,streamout)=evstr(data(compout))
        end
    end
    for subtotal=1:no_input
        subinput(subtotal)=sum(inputs(:,subtotal))
        subinput_kgh(subtotal)=sum(inputs_kgh(:,subtotal))
    end
    for subtotal=1:no_output
        suboutput(subtotal)=sum(outputs(:,subtotal))
        suboutput_kgh(subtotal)=sum(outputs_kgh(:,subtotal))
    end
    totalinput=sum(subinput)
    totalinput_kgh=sum(subinput_kgh)
    totaloutput=sum(suboutput)
    totaloutput_kgh=sum(suboutput_kgh)
    if  abs(totalinput_kgh-totaloutput_kgh) < 1e-1 then
        setStatus("success","Your Mass Balance is Balanced")
    else
        setStatus("running","Process ended, however the mass balance is not balanced. Re-check your input and try again")
    end
    
    //kmol/h
    mprintf('\n   ------------------------------------------------------------')
    mprintf('\n                Mass Balance for (unit) (kmol/h)')
    mprintf('\n   ------------------------------------------------------------')
    mprintf('\n   Comp|                     Input                      |Output')
    mprintf('\n   ------------------------------------------------------------')
    disp('         1           2           3           4           1')
    mprintf('   ------------------------------------------------------------')
    disp([[1:size(components)(2)]' inputs outputs])
    mprintf('\n   ------------------------------------------------------------')
    disp('subtotal:')
    mprintf('   ------------------------\n')
    for sub=1:no_input
        mprintf('   Input %u = %g kmol/h\n',sub,subinput(sub))
    end
    mprintf('   ------------------------\n')
    for sub=1:no_output
        mprintf('   Output %u = %g kmol/h\n',sub,suboutput(sub))
    end
    mprintf('   ------------------------\n')
    disp('total:')
    mprintf('   input = %g kmol/h\n',totalinput)
    mprintf('   output = %g kmol/h\n\n',totaloutput)
    
    //kg/h
    mprintf('\n   ----------------------------------------------------')
    mprintf('\n             Mass Balance for (unit) (kg/h)')
    mprintf('\n   ----------------------------------------------------')
    mprintf('\n   Comp|                Input                 |Output')
    mprintf('\n   ----------------------------------------------------')
    disp('         1           2           3           4           1')
    mprintf('   ----------------------------------------------------')
    disp([[1:size(components)(2)]' inputs_kgh outputs_kgh])
    mprintf('\n   ----------------------------------------------------')
    disp('subtotal:')
    mprintf('   ------------------------\n')
    for sub=1:no_input
        mprintf('   Input %u = %g kg/h\n',sub,subinput_kgh(sub))
    end
    mprintf('   ------------------------\n')
    for sub=1:no_output
        mprintf('   Output %u = %g kg/h\n',sub,suboutput_kgh(sub))
    end
    mprintf('   ------------------------\n')
    disp('total:')
    mprintf('   input = %g kg/h\n',totalinput_kgh)
    mprintf('   output = %g kg/h',totaloutput_kgh)
endfunction




//Create a figure with a gridbag layout
f = figure( ...
"figure_name"     , gettext("Mass Balance Simulation"),...
"dockable"        , "off",...
"infobar_visible" , "off",...
"toolbar"         , "none",...
"menubar_visible" , "off",...
"menubar"         , "none",...
"default_axes"    , "off",...
"layout"          , "gridbag",...
"visible"         , "on");

comp_dialog = uicontrol(f , ...
"style"               , "frame"                     , ...
"border", createBorder("titled", createBorder("line", "#000"), "Component Input*"),...
"layout", "grid",...
"layout_options", createLayoutOptions("grid", [1,1],[0,0]),...
"constraints", createConstraints("gridbag",[1, 1, 1, 3], [1, 0], "horizontal", "upper", [0, 100]));

comp_input = uicontrol(comp_dialog,...
"tag", "comp_input",...
"style", "edit",...
"verticalalignment", "top",...
"max", 5,...
"constraints", createConstraints("grid")...
);


mw_dialog = uicontrol(f , ...
"style"               , "frame"                     , ...
"border", createBorder("titled", createBorder("line", "#000"), "Molecular Weight Input (kg/kmol)*"),...
"layout", "grid",...
"layout_options", createLayoutOptions("grid", [1,1],[0,0]),...
"constraints", createConstraints("gridbag",[2, 1, 1, 3], [1, 0], "horizontal", "upper", [0, 100]));

uicontrol(mw_dialog,...
"tag", "mw_input",...
"style", "edit",...
"verticalalignment", "top",...
"max", 5,...
"constraints", createConstraints("grid")...
);

io_dialog = uicontrol(f , ...
"style"               , "frame"                     , ...
"border", createBorder("titled", createBorder("line", "#000"), "I/O Stream(s)"),...
"layout", "grid",...
"layout_options", createLayoutOptions("grid", [2,1],[0,10]),...
"constraints", createConstraints("gridbag",[1, 4, 2, 1], [1, 0], "horizontal", "upper", [0, 0]));

uicontrol(io_dialog,...
"tag", "no_output",...
"string", "1",...
"style", "edit",...
"constraints", createConstraints("grid")...
);

uicontrol(io_dialog,...
"style", "text",...
"string", "No. of output stream(s)*",...
"constraints", createConstraints("grid")...
);

uicontrol(io_dialog,...
"tag", "no_input",...
"string", "1",...
"style", "edit",...
"constraints", createConstraints("grid")...
);

uicontrol(io_dialog,...
"style", "text",...
"string", "No. of input stream(s)*",...
"constraints", createConstraints("grid")...
);

info_label = uicontrol(f , ...
"style"               , "text"                     , ...
"string", "* required (cannot be blank)",...
"foregroundcolor", danger,...
"constraints", createConstraints("gridbag",[1, 5, 2, 1], [1, 0], "horizontal", "upper", [0, 0]));

eval_btn = uicontrol(f , ...
"style"               , "pushbutton"                     , ...
"string", "Evaluate",...
"callback", "evaluate",...
"constraints", createConstraints("gridbag",[1, 6, 2, 1], [1, 0], "horizontal", "upper", [0, 0]));


reset_btn = uicontrol(f , ...
"style"               , "pushbutton"                     , ...
"string", "Reset",...
"callback", "reset",...
"constraints", createConstraints("gridbag",[1, 7, 2, 1], [1, 0], "horizontal", "upper", [0, 0]));

status_dialog = uicontrol(f , ...
"tag", "status",...
"style"               , "text"                     , ...
"string", "Status: Waiting for input",...
"horizontalalignment", "center",...
"backgroundcolor", standby,...
"constraints", createConstraints("gridbag",[1, 8, 2, 1], [1, 0], "horizontal", "upper", [0, 0]));
